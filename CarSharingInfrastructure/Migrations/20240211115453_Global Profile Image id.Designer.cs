// <auto-generated />
using System;
using CarSharingInfrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarSharingInfrastructure.Migrations
{
    [DbContext(typeof(CarSharingDbContext))]
    [Migration("20240211115453_Global Profile Image id")]
    partial class GlobalProfileImageid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarSharingDomain.DomainModels.CarProfileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PricePerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CarProfileModels");
                });

            modelBuilder.Entity("CarSharingDomain.DomainModels.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarProfileModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("DataFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarProfileModelId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CarSharingDomain.DomainModels.CarProfileModel", b =>
                {
                    b.OwnsOne("CarSharingDomain.DomainModels.CarChatacteristics", "Characteristics", b1 =>
                        {
                            b1.Property<Guid>("CarProfileModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Color")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Engine")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Rims")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Upholstery")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CarProfileModelId");

                            b1.ToTable("CarProfileModels");

                            b1.WithOwner()
                                .HasForeignKey("CarProfileModelId");
                        });

                    b.OwnsOne("CarSharingDomain.DomainModels.CarContactDetails", "CarContactDetails", b1 =>
                        {
                            b1.Property<Guid>("CarProfileModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ContactNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("Coutry")
                                .HasColumnType("int");

                            b1.Property<int>("ValueMoney")
                                .HasColumnType("int");

                            b1.HasKey("CarProfileModelId");

                            b1.ToTable("CarProfileModels");

                            b1.WithOwner()
                                .HasForeignKey("CarProfileModelId");
                        });

                    b.OwnsOne("CarSharingDomain.DomainModels.GlobalProfileImage", "GlobalProfileImage", b1 =>
                        {
                            b1.Property<Guid>("CarProfileModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("DataFile")
                                .HasColumnType("varbinary(max)");

                            b1.Property<string>("FileType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CarProfileModelId");

                            b1.ToTable("CarProfileModels");

                            b1.WithOwner()
                                .HasForeignKey("CarProfileModelId");
                        });

                    b.Navigation("CarContactDetails")
                        .IsRequired();

                    b.Navigation("Characteristics")
                        .IsRequired();

                    b.Navigation("GlobalProfileImage")
                        .IsRequired();
                });

            modelBuilder.Entity("CarSharingDomain.DomainModels.Image", b =>
                {
                    b.HasOne("CarSharingDomain.DomainModels.CarProfileModel", "CarProfileModel")
                        .WithMany("Image")
                        .HasForeignKey("CarProfileModelId");

                    b.Navigation("CarProfileModel");
                });

            modelBuilder.Entity("CarSharingDomain.DomainModels.CarProfileModel", b =>
                {
                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
